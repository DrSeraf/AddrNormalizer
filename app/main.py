# --- —Å–¥–µ–ª–∞—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–º ---
import sys, os
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)
# --------------------------------------------

import time
import streamlit as st

from addrnorm.logging_cfg.setup import setup_logging
from addrnorm.io.writer import process_dataframe, write_csv
from app.components.options_panel import render_options
from app.components.file_uploader import upload_csv
from addrnorm.qa.reports import build_columnwise_report, save_examples_txt
from addrnorm.rules.registry import get_profile_path, profile_loaded

st.set_page_config(page_title="AddrNormalizer", layout="wide")

logger = setup_logging(logs_dir="logs", level="INFO")
st.title("AddrNormalizer ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (geo_profile.yaml)
prof_path = get_profile_path()
if profile_loaded():
    st.caption(f"–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω: `{prof_path}`")
else:
    st.warning(
        "–ù–µ –Ω–∞–π–¥–µ–Ω `configs/geo_profile.yaml`. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã/—à—Ç–∞—Ç–∞/ZIP –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π.\n\n"
        "–ì–¥–µ –∏—â–µ–º: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è `ADDRNORM_GEO_PROFILE`, –∑–∞—Ç–µ–º `./configs/geo_profile.yaml`, "
        "–∞ —Ç–∞–∫–∂–µ –ø–æ –¥–µ—Ä–µ–≤—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤–≤–µ—Ä—Ö –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞. "
        "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ `ADDRNORM_GEO_PROFILE` –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ `configs/geo_profile.yaml`."
    )

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–µ–∂–∏–º addr-only | extended –∏ –ø—Ä.)
opts = render_options()

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Å –∞–≤—Ç–æ–ø—Ä–µ–≤—å—é (expander –æ—Ç–∫—Ä—ã—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
df = upload_csv()

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
run = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary", disabled=df is None)

if run and df is not None:
    st.markdown("---")
    st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞")
    with st.spinner("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è..."):
        t0 = time.time()
        out, changes = process_dataframe(df, output_mode=opts["output_mode"])
        dt = time.time() - t0
        logger.info("Processed %s rows in %.2fs (mode=%s)", len(df), dt, opts["output_mode"])

    st.success(f"–ì–æ—Ç–æ–≤–æ: {len(out)} —Å—Ç—Ä–æ–∫ –∑–∞ {dt:.2f} —Å–µ–∫")
    st.dataframe(out.head(20))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    os.makedirs("data/output", exist_ok=True)
    out_path = f"data/output/addrnorm_{int(time.time())}.csv"
    write_csv(out, out_path)
    with open(out_path, "rb") as f:
        st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç CSV", f, file_name=os.path.basename(out_path), mime="text/csv")

    # –ü–æ–º–æ–¥—É–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º (street ‚Üí locality ‚Üí district ‚Üí region ‚Üí country ‚Üí zip)
    st.subheader("–õ–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º")
    lines = build_columnwise_report(changes, per_col_limit=None)  # –±–µ–∑ –ª–∏–º–∏—Ç–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –≤—Å—ë
    examples_path = save_examples_txt(lines, logs_dir="logs")

    st.code("\n".join(lines), language="text")
    st.caption(f"–õ–æ–≥-–ø—Ä–∏–º–µ—Ä—ã: {examples_path}")
    st.caption(f"–ü–æ–ª–Ω—ã–π –ª–æ–≥: {logger.log_path}")

elif df is None:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.")
